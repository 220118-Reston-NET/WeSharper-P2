// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeSharper.Models;

#nullable disable

namespace APIPortal.Migrations
{
    [DbContext(typeof(WeSharperContext))]
    [Migration("20220306191253_NewMigrations2")]
    partial class NewMigrations2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.Friend", b =>
                {
                    b.Property<string>("RelationshipId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RelationshipID");

                    b.Property<string>("AcceptedUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AcceptedUserID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RequestedUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RequestedUserID");

                    b.HasKey("RelationshipId")
                        .HasName("PK__Friend__31FEB861C0AB61AA");

                    b.HasIndex("AcceptedUserId");

                    b.HasIndex("RequestedUserId");

                    b.ToTable("Friend", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.Group", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("GroupManagerId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupManagerID");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GroupPicture")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.HasKey("GroupId");

                    b.HasIndex("GroupManagerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WeSharper.Models.GroupPost", b =>
                {
                    b.Property<string>("GroupPostId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupPostID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("GroupId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PostPhoto")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("GroupPostId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupPost", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.GroupPostComment", b =>
                {
                    b.Property<string>("GroupPostCommentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupPostCommentID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("GroupId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupPostComment1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("GroupPostComment");

                    b.Property<string>("GroupPostId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupPostID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("GroupPostCommentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupPostId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupPostComment", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.GroupPostCommentReact", b =>
                {
                    b.Property<string>("GroupPostCommentReactId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupPostCommentReactID");

                    b.Property<string>("GroupId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupPostCommentId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupPostCommentID");

                    b.Property<string>("ReactId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ReactID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("GroupPostCommentReactId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupPostCommentId");

                    b.HasIndex("ReactId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupPostCommentReact", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.GroupPostReact", b =>
                {
                    b.Property<string>("GroupPostReactId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupPostReactID");

                    b.Property<string>("GroupId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupPostId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupPostID");

                    b.Property<string>("ReactId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ReactID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("GroupPostReactId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupPostId");

                    b.HasIndex("ReactId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupPostReact", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.GroupUser", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("GroupId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUser", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.Hobby", b =>
                {
                    b.Property<string>("HobbyId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HobbyID");

                    b.Property<string>("HobbyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("HobbyId");

                    b.HasIndex(new[] { "HobbyName" }, "UQ__Hobby__C392860017568D0F")
                        .IsUnique()
                        .HasFilter("[HobbyName] IS NOT NULL");

                    b.ToTable("Hobby", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MessageID");

                    b.Property<string>("Content")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("MessageSent")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RecipientUserID");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SenderUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SenderUserID");

                    b.HasKey("MessageId");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PostID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostContent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PostPhoto")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.PostComment", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommentID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostComment1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PostComment");

                    b.Property<string>("PostId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PostID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__PostComm__C3B4DFAAE4A3070A");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComment", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.PostCommentReact", b =>
                {
                    b.Property<string>("PostCommentReactId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PostCommentReactID");

                    b.Property<string>("CommentId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CommentID");

                    b.Property<string>("ReactId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ReactID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("PostCommentReactId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReactId");

                    b.HasIndex("UserId");

                    b.ToTable("PostCommentReact", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.PostReact", b =>
                {
                    b.Property<string>("PostReactId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PostReactID");

                    b.Property<string>("PostId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PostID");

                    b.Property<string>("ReactId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ReactID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("PostReactId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReactId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReact", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.Profile", b =>
                {
                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProfileID");

                    b.Property<string>("Bio")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ProfilePictureURL");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.Reaction", b =>
                {
                    b.Property<string>("ReactId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ReactID");

                    b.Property<string>("ReactIcon")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ReactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ReactId")
                        .HasName("PK__Reaction__7661ACCFA61E2A48");

                    b.ToTable("Reaction", (string)null);
                });

            modelBuilder.Entity("WeSharper.Models.Userhobby", b =>
                {
                    b.Property<string>("HobbyId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HobbyID");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasIndex("HobbyId");

                    b.HasIndex("UserId");

                    b.ToTable("Userhobbies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WeSharper.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WeSharper.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeSharper.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WeSharper.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeSharper.Models.Friend", b =>
                {
                    b.HasOne("WeSharper.Models.ApplicationUser", "AcceptedUser")
                        .WithMany("FriendAcceptedUsers")
                        .HasForeignKey("AcceptedUserId")
                        .HasConstraintName("FK__Friend__Accepted__56B3DD81");

                    b.HasOne("WeSharper.Models.ApplicationUser", "RequestedUser")
                        .WithMany("FriendRequestedUsers")
                        .HasForeignKey("RequestedUserId")
                        .HasConstraintName("FK__Friend__Requeste__55BFB948");

                    b.Navigation("AcceptedUser");

                    b.Navigation("RequestedUser");
                });

            modelBuilder.Entity("WeSharper.Models.Group", b =>
                {
                    b.HasOne("WeSharper.Models.ApplicationUser", "GroupManager")
                        .WithMany("Groups")
                        .HasForeignKey("GroupManagerId")
                        .HasConstraintName("FK__Groups__GroupMan__6F7F8B4B");

                    b.Navigation("GroupManager");
                });

            modelBuilder.Entity("WeSharper.Models.GroupPost", b =>
                {
                    b.HasOne("WeSharper.Models.Group", "Group")
                        .WithMany("GroupPosts")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK__GroupPost__Group__753864A1");

                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany("GroupPosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__GroupPost__UserI__762C88DA");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.GroupPostComment", b =>
                {
                    b.HasOne("WeSharper.Models.Group", "Group")
                        .WithMany("GroupPostComments")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK__GroupPost__Group__1975C517");

                    b.HasOne("WeSharper.Models.GroupPost", "GroupPost")
                        .WithMany("GroupPostComments")
                        .HasForeignKey("GroupPostId")
                        .HasConstraintName("FK__GroupPost__Group__1A69E950");

                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany("GroupPostComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__GroupPost__UserI__1B5E0D89");

                    b.Navigation("Group");

                    b.Navigation("GroupPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.GroupPostCommentReact", b =>
                {
                    b.HasOne("WeSharper.Models.Group", "Group")
                        .WithMany("GroupPostCommentReacts")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK__GroupPost__Group__1E3A7A34");

                    b.HasOne("WeSharper.Models.GroupPostComment", "GroupPostComment")
                        .WithMany("GroupPostCommentReacts")
                        .HasForeignKey("GroupPostCommentId")
                        .HasConstraintName("FK__GroupPost__Group__1F2E9E6D");

                    b.HasOne("WeSharper.Models.Reaction", "React")
                        .WithMany("GroupPostCommentReacts")
                        .HasForeignKey("ReactId")
                        .HasConstraintName("FK__GroupPost__React__2116E6DF");

                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany("GroupPostCommentReacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__GroupPost__UserI__2022C2A6");

                    b.Navigation("Group");

                    b.Navigation("GroupPostComment");

                    b.Navigation("React");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.GroupPostReact", b =>
                {
                    b.HasOne("WeSharper.Models.Group", "Group")
                        .WithMany("GroupPostReacts")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK__GroupPost__Group__7908F585");

                    b.HasOne("WeSharper.Models.GroupPost", "GroupPost")
                        .WithMany("GroupPostReacts")
                        .HasForeignKey("GroupPostId")
                        .HasConstraintName("FK__GroupPost__Group__7AF13DF7");

                    b.HasOne("WeSharper.Models.Reaction", "React")
                        .WithMany("GroupPostReacts")
                        .HasForeignKey("ReactId")
                        .HasConstraintName("FK__GroupPost__React__7BE56230");

                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany("GroupPostReacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__GroupPost__UserI__79FD19BE");

                    b.Navigation("Group");

                    b.Navigation("GroupPost");

                    b.Navigation("React");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.GroupUser", b =>
                {
                    b.HasOne("WeSharper.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK__GroupUser__Group__7167D3BD");

                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__GroupUser__UserI__725BF7F6");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.Message", b =>
                {
                    b.HasOne("WeSharper.Models.ApplicationUser", "RecipientUser")
                        .WithMany("MessageRecipientUsers")
                        .HasForeignKey("RecipientUserId")
                        .HasConstraintName("FK__Message__Recipie__24E777C3");

                    b.HasOne("WeSharper.Models.ApplicationUser", "SenderUser")
                        .WithMany("MessageSenderUsers")
                        .HasForeignKey("SenderUserId")
                        .HasConstraintName("FK__Message__SenderU__23F3538A");

                    b.Navigation("RecipientUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("WeSharper.Models.Post", b =>
                {
                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Post__UserID__5D60DB10");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.PostComment", b =>
                {
                    b.HasOne("WeSharper.Models.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__PostComme__PostI__66EA454A");

                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PostComme__UserI__67DE6983");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.PostCommentReact", b =>
                {
                    b.HasOne("WeSharper.Models.PostComment", "Comment")
                        .WithMany("PostCommentReacts")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK__PostComme__Comme__6ABAD62E");

                    b.HasOne("WeSharper.Models.Reaction", "React")
                        .WithMany("PostCommentReacts")
                        .HasForeignKey("ReactId")
                        .HasConstraintName("FK__PostComme__React__6CA31EA0");

                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany("PostCommentReacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PostComme__UserI__6BAEFA67");

                    b.Navigation("Comment");

                    b.Navigation("React");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.PostReact", b =>
                {
                    b.HasOne("WeSharper.Models.Post", "Post")
                        .WithMany("PostReacts")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__PostReact__PostI__6225902D");

                    b.HasOne("WeSharper.Models.Reaction", "React")
                        .WithMany("PostReacts")
                        .HasForeignKey("ReactId")
                        .HasConstraintName("FK__PostReact__React__640DD89F");

                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany("PostReacts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PostReact__UserI__6319B466");

                    b.Navigation("Post");

                    b.Navigation("React");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.Profile", b =>
                {
                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Profile__UserID__4D2A7347");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.Userhobby", b =>
                {
                    b.HasOne("WeSharper.Models.Hobby", "Hobby")
                        .WithMany()
                        .HasForeignKey("HobbyId")
                        .HasConstraintName("FK__Userhobbi__Hobby__52E34C9D");

                    b.HasOne("WeSharper.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Userhobbi__UserI__51EF2864");

                    b.Navigation("Hobby");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeSharper.Models.ApplicationUser", b =>
                {
                    b.Navigation("FriendAcceptedUsers");

                    b.Navigation("FriendRequestedUsers");

                    b.Navigation("GroupPostCommentReacts");

                    b.Navigation("GroupPostComments");

                    b.Navigation("GroupPostReacts");

                    b.Navigation("GroupPosts");

                    b.Navigation("Groups");

                    b.Navigation("MessageRecipientUsers");

                    b.Navigation("MessageSenderUsers");

                    b.Navigation("PostCommentReacts");

                    b.Navigation("PostComments");

                    b.Navigation("PostReacts");

                    b.Navigation("Posts");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("WeSharper.Models.Group", b =>
                {
                    b.Navigation("GroupPostCommentReacts");

                    b.Navigation("GroupPostComments");

                    b.Navigation("GroupPostReacts");

                    b.Navigation("GroupPosts");
                });

            modelBuilder.Entity("WeSharper.Models.GroupPost", b =>
                {
                    b.Navigation("GroupPostComments");

                    b.Navigation("GroupPostReacts");
                });

            modelBuilder.Entity("WeSharper.Models.GroupPostComment", b =>
                {
                    b.Navigation("GroupPostCommentReacts");
                });

            modelBuilder.Entity("WeSharper.Models.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostReacts");
                });

            modelBuilder.Entity("WeSharper.Models.PostComment", b =>
                {
                    b.Navigation("PostCommentReacts");
                });

            modelBuilder.Entity("WeSharper.Models.Reaction", b =>
                {
                    b.Navigation("GroupPostCommentReacts");

                    b.Navigation("GroupPostReacts");

                    b.Navigation("PostCommentReacts");

                    b.Navigation("PostReacts");
                });
#pragma warning restore 612, 618
        }
    }
}
